buildscript {
    ext {
        joobyVersion = "3.0.6"
        jupiterVersion = "5.10.1"
        okHttpVersion = "5.0.0-alpha.11"
    }
}

plugins {
    id "application"
    id "io.jooby.openAPI" version "${joobyVersion}"
    id "io.jooby.run" version "${joobyVersion}"
    id "jacoco"
    id "io.spring.dependency-management" version "1.1.4"
    id "com.google.osdetector" version "1.7.3"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "com.github.ben-manes.versions" version "0.50.0"
    id 'com.diffplug.spotless' version '6.23.2'
}

joobyRun {
    mainClass = "com.github.App"
    restartExtensions = ["conf", "properties", "class"]
    compileExtensions = ["java", "kt"]
    port = 8080
    waitTimeBeforeRestart = 500
}

group "app"
version "1.0.0"
mainClassName = "com.github.App"
sourceCompatibility = 17

repositories {
    google()
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "io.jooby:jooby-bom:$joobyVersion"
    }
}

dependencies {
    annotationProcessor "io.jooby:jooby-apt:$joobyVersion"
    implementation "io.jooby:jooby-netty:$joobyVersion"
    implementation "io.jooby:jooby-guice:$joobyVersion"
    implementation "io.jooby:jooby-jackson:$joobyVersion"
    implementation "io.jooby:jooby-rxjava3:$joobyVersion"
    implementation "ch.qos.logback:logback-classic:1.4.13"
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.squareup.okio:okio:3.6.0"
    implementation "com.google.guava:guava:32.1.3-jre"
    testImplementation "io.jooby:jooby-test:$joobyVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$jupiterVersion"
    testImplementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    testImplementation "org.mockito:mockito-core:5.7.0"
}

test {
    useJUnitPlatform()
}

tasks.register("dockerBuild", Exec) {
    description 'Builds the docker image'
    group = "docker"
    commandLine 'docker', 'build', '-t', 'users-api:latest', '.', '--progress', 'auto'
}

/** Java debug information: */
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            '-parameters',
            '-Ajooby.incremental=true',
            '-Ajooby.services=true',
            '-Ajooby.debug=false'
    ]
    options.debug = true
}


shadowJar {
    mergeServiceFiles()
    archiveFileName = 'app.jar'
}


joobyRun.dependsOn openAPI

jar.dependsOn openAPI

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    // ./gradlew test jacocoTestReport from CLI
    dependsOn test
    group = "Reporting"
    reports {
        xml.required.set(true)
        csv.required.set(true)
        html.setDestination(file("${layout.getBuildDirectory().get()}/reports/coverage"))
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [//'**/github/App.*',
                                        //'**/github/core/*',
            ])
        }))
    }
}
