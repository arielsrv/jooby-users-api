# yaml-language-server: $schema=https://json.schemastore.org/taskfile.json# https://taskfile.dev/version: '3'env:  APP_NAME: http-push  GO_VERSION: 1.21  TASK_VERSION: v3.28  GITLAB_TOKEN: ${GITLAB_TOKEN}  ENTRY_POINT: program.go  BIN: app  SOURCE_FOLDER: .  BUILD_FOLDER: bin  COVERAGE_OUT_FILE: coverage.out  COVERAGE_HTML_FILE: coverage.html  KUSTOMIZE_FOLDER_INPUT: kustomizetasks:  docker:cmd:    cmd: ./bin/app  docker:build:    desc: docker build    cmds:      - |        docker build -t {{.CLI_ARGS}} . --progress auto  docker:run:    desc: docker run    cmds:      - |        docker run -p 8080:8080 {{.CLI_ARGS}} \          -e APP_NAME=go-mq-pusher \          -e ENV=docker \          -e AWS_SECRET_ACCESS_KEY=test \          -e AWS_SECRET_ACCESS_KEY=test \          -e AWS_DEFAULT_REGION=us-east-1 \         --consumer-endpoint=https://reqbin.com/echo/post/json \         --connection-timeout=5000 \         --timeout=2000 \         --insecure=true \         --follow-redirect=true \         --queue-url=http://localhost:4566/000000000000/orders-consumer \         --queue-name=orders-consumer \         --max-number-of-messages=5 \         --wait-time=5s \         --visibility-timeout=30s \         --aws-endpoint-url=http://host.docker.internal:4566 \         --aws-region=us-east-1 \         --aws-partition-id=aws  k:build:    desc: build k8s build    deps: [ create-folder ]    cmds:      - kustomize build $KUSTOMIZE_FOLDER_INPUT/ --output $BUILD_FOLDER  k:apply:    desc: apply k8s config    deps: [ create-folder ]    cmds:      - kustomize build $KUSTOMIZE_FOLDER_INPUT/ --output $BUILD_FOLDER/initial-script.yaml      - kubectl apply -f $BUILD_FOLDER/initial-script.yaml  k:example:    desc: build k8s image example    cmds:      - kustomize build $KUSTOMIZE_FOLDER_INPUT/ --output example/job.yaml  lint:    desc: Use golangci-lint (.golangci.yml).    cmds:      - golangci-lint run --fix  test:    desc: Run test.    cmds:      - go test -race ./...      - go test ./...  coverage:    desc: Makes report coverage.    cmds:      - go test ./... -covermode=count -coverprofile=$COVERAGE_OUT_FILE      - go tool cover -html $COVERAGE_OUT_FILE -o $COVERAGE_HTML_FILE      - go tool cover -func=$COVERAGE_OUT_FILE -o=$COVERAGE_OUT_FILE  cobertura:    desc: Makes report coverage.    cmds:      - go test ./... -coverprofile=coverage.txt -covermode count      - go get github.com/boumenot/gocover-cobertura      - go run github.com/boumenot/gocover-cobertura < coverage.txt > coverage.xml  download:    desc: Run go mod tidy.    cmds:      - go mod tidy  upgrade:    desc: Check for latest direct dependencies.    cmds:      - go-mod-upgrade  update:    desc: Check for latest direct dependencies    deps: [ download ]    cmds:      - go list -mod=mod -u -m -json all | go-mod-outdated -update -direct  build:    desc: Build the go EXECUTABLE.    deps: [ create-folder ]    generates:      - server    cmds:      - go build -buildmode=exe -a -o app $SOURCE_FOLDER/$ENTRY_POINT      - mv app $BUILD_FOLDER  create-folder:    cmds:      - echo '{{OS}} {{ARCH}}'      - echo '{{fromSlash .BUILD_FOLDER}}'      - '{{if eq OS "darwin"}}[ -d "$BUILD_FOLDER" \] & rm -rf "$BUILD_FOLDER" && mkdir -p "$BUILD_FOLDER/.."{{end}}'      - '{{if eq OS "linux"}}[ -d "$BUILD_FOLDER" \] & rm -rf "$BUILD_FOLDER" && mkdir -p "$BUILD_FOLDER/.."{{end}}'    internal: true  all:    desc: Run relevant tasks.    cmds:      - task: download      - task: lint      - task: test  docker:all:    desc: Run relevant tasks.    cmds:      - task: download      - task: lint      - task: test      - task: k:build      - task: docker:build      - task: docker:run  default:    desc: Run [build] task.    cmds:      - echo 'OS:' {{OS}}, 'ARCH:' {{ARCH}}      - task: build  run:    desc: Run $ENTRY_POINT    cmds:      - |        ./$BUILD_FOLDER/$BIN \        --consumer-endpoint=http://localhost:8080/consumer/orders \        --connection-timeout=5000 \        --timeout=2000 \        --insecure=true \        --follow-redirect=true \        --queue-url=http://localhost:4566/000000000000/orders-consumer \        --queue-name=orders-consumer \        --max-number-of-messages=5 \        --wait-time=5s \        --visibility-timeout=30s \        --aws-endpoint-url=http://localhost:4566 \        --aws-region=us-east-1 \        --aws-partition-id=aws