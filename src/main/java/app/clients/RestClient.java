package app.clients;import com.fasterxml.jackson.databind.ObjectMapper;import io.reactivex.rxjava3.core.Single;import jakarta.inject.Inject;import jakarta.inject.Singleton;import java.io.IOException;import okhttp3.Call;import okhttp3.Callback;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.Response;@Singletonpublic class RestClient {    @Inject    OkHttpClient okHttpClient;    @Inject    ObjectMapper objectMapper;    public <T> Single<T> Get(String url, Class<T> clazz) {        return Single.create(emitter -> {            Request request = new Request.Builder().url(url)                .build();            this.okHttpClient.newCall(request).enqueue(new Callback() {                @Override                public void onFailure(Call call, IOException e) {                    emitter.onError(e);                }                @Override                public void onResponse(Call call, Response response) throws IOException {                    if (!response.isSuccessful()) {                        emitter.onError(new IOException("Unexpected code " + response));                        return;                    }                    T result = objectMapper.readValue(response.body().string(), clazz);                    emitter.onSuccess(result);                }            });        });    }}