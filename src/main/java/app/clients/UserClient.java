package app.clients;import app.model.responses.UserResponse;import com.fasterxml.jackson.core.type.TypeReference;import com.fasterxml.jackson.databind.ObjectMapper;import io.reactivex.rxjava3.core.Single;import jakarta.inject.Inject;import jakarta.inject.Singleton;import java.io.IOException;import java.util.List;import okhttp3.Call;import okhttp3.Callback;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.Response;@Singletonpublic class UserClient {    @Inject    OkHttpClient httpClient;    @Inject    ObjectMapper objectMapper;    public Single<List<UserResponse>> GetUsers() {        return Single.create(emitter -> {            Request request = new Request.Builder().url("https://gorest.co.in/public/v2/users")                .build();            // Realizar la solicitud as√≠ncrona            this.httpClient.newCall(request).enqueue(new Callback() {                @Override                public void onFailure(Call call, IOException e) {                    emitter.onError(e);                }                @Override                public void onResponse(Call call, Response response) throws IOException {                    if (!response.isSuccessful()) {                        emitter.onError(new IOException("Unexpected code " + response));                        return;                    }                    List<UserResponse> result = objectMapper.readValue(response.body().string(),                        new TypeReference<>() {                        });                    emitter.onSuccess(result);                }            });        });    }}